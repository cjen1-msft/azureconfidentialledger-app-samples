import argparse
import json
import tempfile
import sys
import base64

processor_cert_pem_str = '''-----BEGIN CERTIFICATE-----
MIICrDCCAZSgAwIBAgIUdQjdofmBDquu7JsnoSQYzEcen1cwDQYJKoZIhvcNAQEL
BQAwEDEOMAwGA1UEAwwFZHVtbXkwHhcNMjUwMTA2MTUxNTExWhcNMjUwMTE2MTUx
NTExWjAQMQ4wDAYDVQQDDAVkdW1teTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
AQoCggEBALeTP9OU18mVPDgkGTGAVGQ2S1r1F3TSa0MNnw0TFYJz1wIEB6R1sSrD
9yThMPU3MdA83oKKJyYTaF4htr+2BN9BFDtmBDY8nSp1kBL5zf5CUVlyTVgjjGBB
O4QdufztIXqprMNN7OLTRkKRcHZdqCBKt6l9xMhOIVi6hR90FizlwxUkJ25yLUkw
P7t8AxADAH6nTZR5dp7SQmiX1iVAwhvTjN884XxXjQOUAa+mNVobiRFVh8r40dkN
vKPkWzqe91FcpAl9VdqypFeQyfAdEG3Q/omCrihUIJFyAE8PlhcmTehw3TOpcumf
eQy5PYYAjqr352fA84oE88NGRpj8ArcCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEA
bzpLeGdKjPjrTKspM1wVNrwY4ofgACmYa/zhMgx8vWZ6bjEl5D4rROaiIcGehDxV
GRgirGjxuoQaUaVxbJXNdVLb87bWI3i9bAucow+/0Z3v6VNOVHto6NSIw2igoHgo
nUbbQegYtnq6mWZSOoXxsYnGQeD6Q+OSCEpwGPBfYqBHoZGvVURGrpk+1cvezmXk
Q245m80+YWPqRmxCIlinKZjEOaR4OITpdgE73JnCv7tP9wzM2UpySWUzhEnBUrnq
J0/VAn7BJWQ9b+QBWfjI2IJsrjeC/slWtRYB09EvvwGuiWAj4O7HI8uCYmCKAm5G
GJfgYdWXxfh70fr0722aPg==
-----END CERTIFICATE-----'''

processor_privk_pem_str = '''-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC3kz/TlNfJlTw4
JBkxgFRkNkta9Rd00mtDDZ8NExWCc9cCBAekdbEqw/ck4TD1NzHQPN6CiicmE2he
Iba/tgTfQRQ7ZgQ2PJ0qdZAS+c3+QlFZck1YI4xgQTuEHbn87SF6qazDTezi00ZC
kXB2XaggSrepfcTITiFYuoUfdBYs5cMVJCduci1JMD+7fAMQAwB+p02UeXae0kJo
l9YlQMIb04zfPOF8V40DlAGvpjVaG4kRVYfK+NHZDbyj5Fs6nvdRXKQJfVXasqRX
kMnwHRBt0P6Jgq4oVCCRcgBPD5YXJk3ocN0zqXLpn3kMuT2GAI6q9+dnwPOKBPPD
RkaY/AK3AgMBAAECggEAHENVblPaLTUGwnX8Uvy5AXzCeUyGwfure/Va6X5or176
WVsZeh6MmlL1d/4btYU77B2S/HIcuOYACY4TPszdTyoL3WFFgLwwTlsvRVykdGLt
d2H7unguopsoeJzDB8fSgboh2SfkMr/ob1NJB1BAFEisojG03En7JFgDKuaKi3rJ
NQWEpY4vguScgZEyla+red6PX5pKUm9yjYNkdmpNFhxmu5Fog6vfIiuvKY8X7Oyj
wJwOK7sdWfy3YltzxGF5NDN7yQgpV+dMYBxtnVLvzt9nz4bD6pZlTgMdMr3hAxMa
ePbBlvy0Cmga7w9iu3mighG9h6HX/K2ye1oe4DGDIQKBgQDyYM7nqT+mNX7ggZl/
DKcezDqxfoaDHFO0hZ4KKwiKdn5vLHRraYd0dEpGyh1eIpnCPGxscZUhDC7QgWSu
e2Vd9IaviAYEdF+i4qPs4FqhHa2UiScbdWR+hsDYcyLL9HlLo3SJCekLMh9Qb3KX
ABFwPTJKKxrRVM6/4gXviSTRGQKBgQDB5GtUszaPXxgkdfjwu83sUGMj0eko35A9
FDK7PKyInyeg692efQ9APWsV2QuRi7n7rK0OxS+ztyajfmyklN+kR9yAV1m5n/PN
3aOY3mxLcT4wb1GXO0aCHSbmdGGbYG1wYXjjuPEXt5kxHBNNs1cKpXtWD1ngR2/E
Ucjich7cTwKBgQDEmK16zpdoE6A0Lir5GKQ9oN5CtiQZGNL0bCUCjmFBHlfziRVt
Qo2ycdkFjk8/2cTp/eTcGU0jHyShzzKBLGnOSdctbaGj31jrX/Yi3t/kK5RuFMl5
xkCbOGYXq1wgHs58Abs2pKk4gZFQxvUlcdKzPZAbBNedz7JbhdPWtWD9kQKBgAur
3U4e75TXy5M+SrrrAy1LdXxNgXSFaKBUm+0rbNNYiUElkZSdwJJEYDLTet/LAmoE
7fHqqsFtr/S9gnqxv3ibHsnW+D61Qy7MPbHRCcHM0kqGGOo6ljb03EeZD9sTheLy
6x0CH/kmgyEyqHLP7dhlN7RpfiaDBlZR+f6vke3/AoGBAN8+JngGUrzmnyy/ihoV
JUu3YzIiDdyc1abFHby/aRAbQEmsmTeN4SonYlHqnPdfgiQmfYF65XUnOuwggWju
8riTlnTUTuENy6HgFQ/b6Ry4Mw1ZaasYNjLee3+2lWf6B8NYrSlwC1JqN1seuaBJ
QFenyMIlHU9vj0KxTUV7ihHQ
-----END PRIVATE KEY-----'''

processor_registration_request = {'attestation': 'AgAAAAIAAAAfAAMAAAAAAAEAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAAAAAV1QEAAAAAAAAAAAAAAAAAAAC2sZU/Zk43CRRNBzubHNsp0/XjiuOKrgAsEtgRTSECBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGCWkvyqcODVmpxdjJoOawONqHFs36eb6vI/dcTDVjO9W9DR1ArlHiVMM7BmKpRVDT0RIxn88jfyN6KXjcSXYB9rcxB8GzyP2FdvVLux3fRCq98oTX7QzLS9vbMoBp79k6JqLiYp+RmNJZ1Qz3KFMp+BvBWibYmeubQ34r74BSXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACyK55heaUzulQEb7SNE1I1cWIANrOEkOXQ+IIfGtdv2f//////////////////////////////////////////BAAAAAAAFdMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOfcQ/aUHL1ppeWlo39N7Knt/vk/xrj2Z+PjjgmOcsarB7EcKdGqqdgpT5WehV4sM0RX2pEUy5VVxM29QmOhGkBAAAAAAAFdMRNwEAETcBAAQAAAAAABXTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGfDkGhpF9PSK7NOixSNvkn7gdTTbOSEby9vAso1PoqBOJ+ix7g519O4a1LXIOdSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbq9s0nmEg7fMLtd5jh8ORKoV821JDrvVnQet2I8wvhehrtLGVOGmWcY/urCX79gplatform_certificates': '', 'uvm_endorsements': ''}


parser = argparse.ArgumentParser()
parser.add_argument('--setup', action='store_true', default=False, help="Set up ledger's builtin roles")
parser.add_argument('--add-roles', action='store_true', default=False, help="Add role")
parser.add_argument('--bundle', type=str, help="Bundle to deploy")
parser.add_argument('--tpal-tests-directory', type=str, help="Path to tpal tests to re-use that infrastructure.")
parser.add_argument('--sandbox-common', type=str, help="Path to sandbox_common for workspace")
parser.add_argument('--aci-container-url', type=str, help="URL of attested aci container")

if __name__ == "__main__":
  args=parser.parse_args()
  sys.path.append(args.tpal_tests_directory)
  import tester
  from programmability_test_helpers.programmability_test_setup import CCFEndPointUserTest;

  test_harness = CCFEndPointUserTest(args.sandbox_common, "2024-08-22-preview", [tester.CCFEndpoint("127.0.0.1", 8000, "0")])
  if args.setup :
    test_harness._setup_ledger()

  module_name = "auth_test.js"
  bundle = json.loads(open(args.bundle).read())

  admin_cert_identity = test_harness._get_cert_identity()

  # Bundle
  signed_bundle = test_harness._sign_payload(
    admin_cert_identity, "userDefinedEndpoints", bundle
  )
  with tester.client_set(
    endpoints=test_harness.endpoints,
    network_cert_file=test_harness.ca,
  ) as cose_installer:
    cose_installer.put(
      f"/app/userDefinedEndpoints?api-version={test_harness.api_version}",
      body=signed_bundle,
      headers={"content-type":"application/cose"}
    )
  
  # Assign roles
  if args.add_roles:
    with tester.client_set(
      endpoints=test_harness.endpoints,
      network_cert_file=test_harness.ca,
      session_auth=admin_cert_identity
    ) as write_client:
      write_client.put(
        f"/app/roles?api-version={test_harness.api_version}",
        body={
          "roles": [
            {"role_name": "InsuranceAdmin", "role_actions": ["/policy/write", "/policy/read", "/processor/write", "/processor/read"]},
            {"role_name": "InsuranceUser", "role_actions": ["/policy/read"]}
          ]
        },
        headers={"content-type":"application/json"}
      )

      admin_fingerprint = test_harness._format_cert_fingerprint(test_harness.admin_cert_fingerprint)

      write_client.patch(
        f"/app/ledgerUsers/{admin_fingerprint}?api-version={test_harness.api_version}",
        body={"assignedRoles": ['insuranceadmin']},
        headers={"content-type": "application/merge-patch+json"},
      )

  with tempfile.NamedTemporaryFile("w", suffix=".pem") as client_privk_file, \
       tempfile.NamedTemporaryFile("w", suffix=".pem") as client_cert_file, \
       tempfile.NamedTemporaryFile("w", suffix=".pem") as processor_privk_file, \
       tempfile.NamedTemporaryFile("w", suffix=".pem") as processor_cert_file:

    # Set up client temporary keys
    client_privk_pem_str, _ = tester.generate_rsa_keypair(2048)
    client_cert_pem_str = tester.generate_cert(client_privk_pem_str)
    client_privk_file.write(client_privk_pem_str)
    client_privk_file.flush()
    client_cert_file.write(client_cert_pem_str)
    client_cert_file.flush()
    client_identity = test_harness._get_cert_identity(client_cert_file.name, client_privk_file.name)

    ## Set up temporary keys for processor
    processor_privk_file.write(client_privk_pem_str)
    processor_privk_file.flush()
    processor_cert_file.write(client_cert_pem_str)
    processor_cert_file.flush()
    processor_identity = test_harness._get_cert_identity(client_cert_file.name, client_privk_file.name)

    with tester.client_set(
        endpoints=test_harness.endpoints,
        network_cert_file=test_harness.ca,
        session_auth=client_identity
      ) as client, \
      tester.client_set(
        endpoints=test_harness.endpoints,
        network_cert_file=test_harness.ca,
        session_auth=processor_identity,
      ) as processor_client, \
      tester.client_set(
        endpoints=test_harness.endpoints,
        network_cert_file=test_harness.ca,
        session_auth=admin_cert_identity,
      ) as admin_client:
      res = client.get("/app/user_cert")
      client_fingerprint = res.body.text()
      res = processor_client.get("/app/user_cert")
      processor_fingerprint = res.body.text()
      print({"processor": processor_fingerprint, "client": client_fingerprint})

      # ----------  One-off setup flow ---------- 

      # Register valid policy
      # This policy is for the ubuntu based ACI image in ../c-aci/Dockerfile running on ACI around the 6th of January
      admin_client.put(
        "/app/processor/policy",
        body=
        {"uvm_endorsements":{
          "did":"did:x509:0:sha256:I__iuL25oXEVFdTP_aBLx_eT1RPHbCQ_ECBQfYZpt9s::eku:1.3.6.1.4.1.311.76.59.1.2",
          "feed":"ContainerPlat-AMD-UVM",
          "svn":"101"
          },
          "measurement":["GCWkvyqcODVmpxdjJoOawONqHFs36eb6vI/dcTDVjO9W9DR1ArlHiVMM7BmKpRVD"],
          "policy":["T0RIxn88jfyN6KXjcSXYB9rcxB8GzyP2FdvVLux3fRA="]}
        ,
        headers={"content-type": "application/json"}
      )

      # Register processor
      # TODO remove once networking works
      resp = processor_client.put(
        "/app/processor/register",
        body=processor_registration_request,
        headers={"content-type": "application/json"}
      )
      print(resp.body)

      # ---------- Steady state user request flow: ---------- 

      # Register user policy
      admin_client.put(
        "/app/policy",
        body={
          "cert": client_fingerprint,
          "policy": "Test Policy",
        },
        headers={"content-type": "application/json"}
      )

      # Register case report
      resp = client.post(
        "/app/incident",
        body={
          "incidentFingerprint": "testFingerprint",
        },
        headers={"content-type": "application/json"},
      )
      assert(resp.status_code == 200)
      case_report = resp.body.json()

      client.get(
        f"/app/incident/{case_report['caseId']}/metadata",
      )

      # Register case decision
      # TODO swap out for a sleep / poll as the container should submit this
      processor_client.put(
        f"/app/incident/{case_report['caseId']}/decision",
        body={
          "incidentFingerprint": "testFingerprint",
          "policy": case_report['policy'],
          "decision": 100,
        },
        headers={"content-type": "application/json"}
      )

      # Get case decision
      client.get(
        f"/app/incident/{case_report['caseId']}/decision",
      )