import argparse
import json
import tempfile
import sys

processor_private_key = '''
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCNvHTbybUV0I0/
usTOjba1zMdhp23EhchelrIlagFl1igdvGIAlwK0YnwNW2MIYC+Zo1A6/o69tGdE
3aXZFlqcadGsLTU12Bs5LgaFGijnpoRnVLjvKAiv28Jfe6EcJaCm9B9aN8Pk7YUd
BdbfGqgA5ioEqToE2olxf2axfP1SyKDJHXEKwz4H6+DgtBoWm/S9JQ1QWzTNym+K
ecwcULENT0WKxdlDKWAAd0tv3P02Ac0DCxjehpR/vJYlFhCfr3+qG4zS0ZzunAsl
VCHR0WtgmQMHmjB/jppaUnKgpaf66KGMbcH9nMz6GT10adKKJUAWanWiNbu1CirS
Qbt4KdVpAgMBAAECggEAF1NIYqiopdUTKcXG1byksPk+Zr0dvMB3inl/tSs43QAy
zJH6tDYl5SHAC0KwOD9Ra2thAhRv0UXQfkOBI7TLZ1T9gzmoDsW91S8p4NsT7ZY4
e/jeu8ekMQIYKYvi+7WFjB7oz07AwlAEdBOd76F8vIkkU8K1yvlcB9L7nNdWU+Uf
LasSvGyOMwZkgXieo1RLB/LpE26F8DJ+5MTRC/uITlOXjwAyhCSZ+iKodOW27J5c
AJWg+GmSuakTV5BW3+XzIaA04EBtKs//A7X9nYcZX2Z7DPlDPiH/NIebUatRwWkW
Y9zSOfG0VN/VKO5MPP2aAnHWjccRXbNHJFTmAwJg8QKBgQDHZ8dicQatDjMUuQrS
1z72dZIkeHiQPxHw897Rvr4aS35Mj1MmdIQzkwEgQOuXQJcnnYeP9G8Pa02GyZSV
uRWv0Fw8RvQGcq92gLYje/eTSWDRF0V+HZBhbuQqrP+4qVV/H13K+w9nkbgFrWsU
Rl3Xfpqq9OEPCFQzF/lxgu9mfwKBgQC19pj7l5HXt/GFjTlulks25FfcoolU3eS6
a5pNS7WdxTyYE/sg1sSc5xHIhAY6EidxXFxJQO/KYBO7YV5C6PRxZEEbTb3PsJ84
rl9cyL9hgoqENGXoe8G2H0RBl4WSmsWuUaRwYJyQk9wvX1xsycu8ha5ZCdzH58Aj
aTsppchgFwKBgQCQzuu7sIsBl8M+tFaI4OmHf8AeniIn1rWHvwI8XYGehN52aMsg
rRLohUQXES5FjBF5Imw0/XS9xNXrIW63AE8ge3bQC1Lhb92+eCBNSpRzMKGPlo/P
01Zre2VVHIckqkw9YiDx7Dq2otr5vIN7mNJDUVyu8+CQ0yKabDmo1kZWrwKBgACV
Q7Q6rhr02e9FnpN+I8uPO8DXPH1rIJqAUcRBo9lXknQiTEG0rniaPPJZifORr1Kr
qxgI/zu0xxtomna4bGAYpCTEQQFzXW8/D8sqUYKsemkmCdWO3/YHb56OL71ihZOj
a1V42ceU0bXNJmyq0N5Px1k9sNlrIrB6W9gsUdINAoGACgPwkECaM5CR39pg6k8U
n9Q4yorWYfwYegYhNjgE8Hea4wm8Ql3XyA7tMODdvPlyZW//I8bL+XdR5m5USgmt
EWgr4rY+gfsD9dvxA6iTvvzVi7yir1+EqJereNRy+ag4NvQRGsF31jN+XX68q5Cz
SDhISNpRYhCrP4WQgs7Gliw=
'''

processor_cert = '''
MIICrDCCAZSgAwIBAgIUeOu+R7Pz7Qfv/6FirR8sGxBSoLIwDQYJKoZIhvcNAQEL
BQAwEDEOMAwGA1UEAwwFZHVtbXkwHhcNMjUwMTAzMTc1NzQ2WhcNMjUwMTEzMTc1
NzQ2WjAQMQ4wDAYDVQQDDAVkdW1teTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
AQoCggEBAI28dNvJtRXQjT+6xM6NtrXMx2GnbcSFyF6WsiVqAWXWKB28YgCXArRi
fA1bYwhgL5mjUDr+jr20Z0TdpdkWWpxp0awtNTXYGzkuBoUaKOemhGdUuO8oCK/b
wl97oRwloKb0H1o3w+TthR0F1t8aqADmKgSpOgTaiXF/ZrF8/VLIoMkdcQrDPgfr
4OC0Ghab9L0lDVBbNM3Kb4p5zBxQsQ1PRYrF2UMpYAB3S2/c/TYBzQMLGN6GlH+8
liUWEJ+vf6objNLRnO6cCyVUIdHRa2CZAweaMH+OmlpScqClp/rooYxtwf2czPoZ
PXRp0oolQBZqdaI1u7UKKtJBu3gp1WkCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEA
O9xS2nYXTCutgt4oDdpt8FDptHpLst93+JPIPPbemUE/av5itwwNUbRROUip6C+r
H7JynAsZp5ltLehb1CEuCqKpqvQ0RyKRYZEe8LjOm4zH7eqMBaVYYqmB1HluYnVi
GlkIBGmvOqW7uZd9FEQSEp1WjQq693FehVCylbIQSyhe2Fw8jF1aWfmdF2pk2Lio
jNzOswXyS/AcZ0UsvAn2lbvcSuC6LG78AbedXABLc71YYWHodbaOxEyTIfWwGCGH
ruIVIkWpyh10vtZKXMS+nD/Cj86vLXdA2N1WFmy5TSQyERbki/gdMEOoNWKXVdgA
dXpxAbxCTjqWsN+NCh/dgA==
'''

processor_registration_request = {'attestation': 'AgAAAAIAAAAfAAMAAAAAAAEAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAAAAAV1QEAAAAAAAAAAAAAAAAAAADmk+apzbCKmcInGzS+7OLYkuPkTO5jE3nJtcbFu29N+1qQ0uNuIbuHm9er7wuiadpwogs3zfjQaKZ2/evoluufGCWkvyqcODVmpxdjJoOawONqHFs36eb6vI/dcTDVjO9W9DR1ArlHiVMM7BmKpRVDT0RIxn88jfyN6KXjcSXYB9rcxB8GzyP2FdvVLux3fRCq98oTX7QzLS9vbMoBp79k6JqLiYp+RmNJZ1Qz3KFMp+BvBWibYmeubQ34r74BSXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADKMpal0jL/HR4D72S0hZWWWHyvAPexypEBVQt/LEvHdv//////////////////////////////////////////BAAAAAAAFdMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACtQqdbOeOW/9HaCf2A7lfjLi7yVwoEP2bhp8oL7KdReb5Haxb+YAgsDKSnnmK2B51bAORVhWHDxiUuG3entYTOBAAAAAAAFdMRNwEAETcBAAQAAAAAABXTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuwkb5zZgbGDKfa0Cg7GL+UYavOrkIDxyI45qZoDncKEkLAr8KZaXKoghD19LJ+zNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANzCrGf+paLJPQu/SXvXBfUqKLuwHSBTFaPO8n7NCu5ji9BCCA+XvC0ZlaAN5Aniplatform_certificates': '', 'uvm_endorsements': ''}

parser = argparse.ArgumentParser()
parser.add_argument('--setup', action='store_true', default=False, help="Set up ledger's builtin roles")
parser.add_argument('--add-roles', action='store_true', default=False, help="Add role")
parser.add_argument('--bundle', type=str, help="Bundle to deploy")
parser.add_argument('--tpal-tests-directory', type=str, help="Path to tpal tests to re-use that infrastructure.")
parser.add_argument('--sandbox-common', type=str, help="Path to sandbox_common for workspace")


if __name__ == "__main__":
  args=parser.parse_args()
  sys.path.append(args.tpal_tests_directory)
  import tester
  from programmability_test_helpers.programmability_test_setup import CCFEndPointUserTest;

  test_harness = CCFEndPointUserTest(args.sandbox_common, "2024-08-22-preview", [tester.CCFEndpoint("127.0.0.1", 8000, "0")])
  if args.setup :
    test_harness._setup_ledger()

  module_name = "auth_test.js"
  bundle = json.loads(open(args.bundle).read())

  admin_cert_identity = test_harness._get_cert_identity()

  # Bundle
  signed_bundle = test_harness._sign_payload(
    admin_cert_identity, "userDefinedEndpoints", bundle
  )
  with tester.client_set(
    endpoints=test_harness.endpoints,
    network_cert_file=test_harness.ca,
  ) as cose_installer:
    cose_installer.put(
      f"/app/userDefinedEndpoints?api-version={test_harness.api_version}",
      body=signed_bundle,
      headers={"content-type":"application/cose"}
    )
  
  # Assign roles
  if args.add_roles:
    with tester.client_set(
      endpoints=test_harness.endpoints,
      network_cert_file=test_harness.ca,
      session_auth=admin_cert_identity
    ) as write_client:
      write_client.put(
        f"/app/roles?api-version={test_harness.api_version}",
        body={
          "roles": [
            {"role_name": "InsuranceAdmin", "role_actions": ["/policy/write", "/policy/read", "/processor/write", "/processor/read"]},
            {"role_name": "InsuranceUser", "role_actions": ["/policy/read"]}
          ]
        },
        headers={"content-type":"application/json"}
      )

      admin_fingerprint = test_harness._format_cert_fingerprint(test_harness.admin_cert_fingerprint)

      write_client.patch(
        f"/app/ledgerUsers/{admin_fingerprint}?api-version={test_harness.api_version}",
        body={"assignedRoles": ['insuranceadmin']},
        headers={"content-type": "application/merge-patch+json"},
      )

      print(write_client.get("/app/dump_table").body.text())


  with tempfile.NamedTemporaryFile("w", suffix=".pem") as client_privk_file, \
       tempfile.NamedTemporaryFile("w", suffix=".pem") as client_cert_file, \
       tempfile.NamedTemporaryFile("w", suffix=".pem") as processor_privk_file, \
       tempfile.NamedTemporaryFile("w", suffix=".pem") as processor_cert_file:

    # Set up client temporary keys
    client_privk_pem_str, _ = tester.generate_rsa_keypair(2048)
    client_cert_pem_str = tester.generate_cert(client_privk_pem_str)
    client_privk_file.write(client_privk_pem_str)
    client_privk_file.flush()
    client_cert_file.write(client_cert_pem_str)
    client_cert_file.flush()
    client_identity = test_harness._get_cert_identity(client_cert_file.name, client_privk_file.name)

    # Set up temporary keys for processor
    processor_privk_pem_str = processor_private_key
    processor_cert_pem_str = processor_cert
    processor_privk_file.write(client_privk_pem_str)
    processor_privk_file.flush()
    processor_cert_file.write(client_cert_pem_str)
    processor_cert_file.flush()
    processor_identity = test_harness._get_cert_identity(client_cert_file.name, client_privk_file.name)

    with tester.client_set(
        endpoints=test_harness.endpoints,
        network_cert_file=test_harness.ca,
        session_auth=client_identity
      ) as client, \
      tester.client_set(
        endpoints=test_harness.endpoints,
        network_cert_file=test_harness.ca,
        session_auth=processor_identity,
      ) as processor_client, \
      tester.client_set(
        endpoints=test_harness.endpoints,
        network_cert_file=test_harness.ca,
        session_auth=admin_cert_identity,
      ) as admin_client:
      res = client.get("/app/user_cert")
      client_fingerprint = res.body.text()

      # Register policy
      admin_client.put(
        "/app/policy",
        body={
          "cert": client_fingerprint,
          "policy": "Test Policy",
        },
        headers={"content-type": "application/json"}
      )

      # Register valid policies
      admin_client.put(
        "/app/processor/properties",
        body="INVALID",
        headers={"content-type": "application/text"}
      )

      # Register processor
      resp = processor_client.put(
        "/app/processor/register",
        body=processor_registration_request,
        headers={"content-type": "application/json"}
      )
      print(resp.body)

#      # Register case report
#      resp = client.post(
#        "/app/incident",
#        body={
#          "incidentFingerprint": "testFingerprint",
#        },
#        headers={"content-type": "application/json"},
#      )
#      assert(resp.status_code == 200)
#      case_report = resp.body.json()
#
#      client.get(
#        f"/app/incident/{case_report['caseId']}/metadata",
#      )
#
#      # Register case decision
#      processor_client.put(
#        f"/app/incident/{case_report['caseId']}/decision",
#        body={
#          "incidentFingerprint": "testFingerprint",
#          "policy": case_report['policy'],
#          "decision": 100,
#        },
#        headers={"content-type": "application/json"}
#      )
#
#      # Get case decision
#      client.get(
#        f"/app/incident/{case_report['caseId']}/decision",
#      )